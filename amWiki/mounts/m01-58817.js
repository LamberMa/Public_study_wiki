if(typeof AWPageMounts=='undefined'){AWPageMounts={}};AWPageMounts['m01']=[{"name":"01-简单命令-1.md","path":"01-Linux运维/001-Linux常用命令汇总/01-常用简单命令/01-简单命令-1.md","content":"# 常用命令的简单说明\r\n>这里留存一部分常用命令的简单说明，这种命令日常应用挺多，但是实际上能用到的功能寥寥可数，因此用一篇文档陈列在这里。\r\n\r\n***\r\n\r\n## 命令传送门\r\n>1. [命令传送门](#命令传送门 \"命令传送门\")\r\n\t1. [1.cat](#1.cat \"1.cat\")\r\n\t1. [2.tac](#2.tac \"2.tac\")\r\n\t1. [3.ls](#3.ls \"3.ls\")\r\n\t1. [4.cd](#4.cd \"4.cd\")\r\n\t1. [5.more](#5.more \"5.more\")\r\n\t1. [6.less](#6.less \"6.less\")\r\n\t1. [7.head](#7.head \"7.head\")\r\n\t1. [8.tail](#8.tail \"8.tail\")\r\n\t1. [9.file](#9.file \"9.file\")\r\n\t1. [10.diff](#10.diff \"10.diff\")\r\n\r\n### 1.cat\r\n> 查看文件用的命令，这也是使用的最多的查看文件的命令\r\n\r\ncat的常见参数：\r\n- n 输出行号\r\n- b 对于空行并不标出行号  \r\n\r\n比如：\r\n\r\n```\r\n[root@db02 ~]# cat test.txt\r\nroot:x:0:0:root:/root:/bin/bash\r\nbin:x:1:1:bin:/bin:/sbin/nologin\r\ndaemon:x:2:2:daemon:/sbin:/sbin/nologin\r\n\r\nadm:x:3:4:adm:/var/adm:/sbin/nologin\r\n\r\nlp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\r\n```\r\n查看文档的时候输出行号\r\n\r\n```\r\n[root@db02 ~]# cat -n test.txt\r\n     1  root:x:0:0:root:/root:/bin/bash\r\n     2  bin:x:1:1:bin:/bin:/sbin/nologin\r\n     3  daemon:x:2:2:daemon:/sbin:/sbin/nologin\r\n     4\r\n     5  adm:x:3:4:adm:/var/adm:/sbin/nologin\r\n     6\r\n     7  lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\r\n```\r\n针对空行不输出行号：\r\n\r\n```\r\n[root@db02 ~]# cat -b test.txt  \r\n     1  root:x:0:0:root:/root:/bin/bash\r\n     2  bin:x:1:1:bin:/bin:/sbin/nologin\r\n     3  daemon:x:2:2:daemon:/sbin:/sbin/nologin\r\n\r\n     4  adm:x:3:4:adm:/var/adm:/sbin/nologin\r\n\r\n     5  lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\r\n```\r\n### 2.tac\r\n>和cat相反，cat是正向查看，tac就是反向查看，工作中用的不是很多，但是要知道有这么一个功能。\r\n### 3.ls\r\n>ls=list，其实就是列出来的意思，平常的使用中就是查看目录中列出来的文件。\r\n\r\nls的常用参数\r\n\r\n```\r\n-a：显示所有档案及目录（ls内定将档案名或目录名称为“.”的视为影藏，不会列出）；\r\n-A：显示除影藏文件“.”和“..”以外的所有文件列表；\r\n-l：与“-C”选项功能相反，所有输出信息用单列格式输出，不输出为多列；\r\n-F：在每个输出项后追加文件的类型标识符，具体含义：“*”表示具有可执行权限的普通文件，“/”表示目录，“@”表示符号链接，“|”表示命令管道FIFO，“=”表示sockets套接字。当文件为普通文件时，不输出任何标识符；\r\n-b：将文件中的不可输出的字符以反斜线“”加字符编码的方式输出；\r\n-c：与“-lt”选项连用时，按照文件状态时间排序输出目录内容，排序的依据是文件的索引节点中的ctime字段。与“-l”选项连用时，则排序的一句是文件的状态改变时间；\r\n-d：仅显示目录名，而不显示目录下的内容列表。显示符号链接文件本身，而不显示其所指向的目录列表；\r\n-i：显示文件索引节点号（inode）。一个索引节点代表一个文件； --file-type：与“-F”选项的功能相同，但是不显示“*”；\r\n-k：以KB（千字节）为单位显示文件大小；\r\n-l：以长格式显示目录下的内容列表。输出的信息从左到右依次包括文件名，文件类型、权限模式、硬连接数、所有者、组、文件大小和文件的最后修改时间等； -m：用“,”号区隔每个文件和目录的名称； -n：以用户识别码和群组识别码替代其名称；\r\n-r：以文件名反序排列并输出目录内容列表； -s：显示文件和目录的大小，以区块为单位； -t：用文件和目录的更改时间排序；\r\n-L：如果遇到性质为符号链接的文件或目录，直接列出该链接所指向的原始文件或目录；\r\n-R：递归处理，将指定目录下的所有文件及子目录一并处理；\r\n-t：按照时间顺序显示\r\n-r：逆序显示\r\n```\r\n以长格式来显示文件（或者我们可以直接简写ll=ls -l）,-h参数会把大小转换为人可读的形式：\r\n\r\n```\r\n[root@db02 ~]# ls -lh\r\ntotal 63M\r\n-rw-------. 1 root root 1.2K Feb  2 00:40 anaconda-ks.cfg\r\ndrwxr-xr-x  2 root root 4.0K Feb 28 16:49 bash_scripts\r\ndrwxr-xr-x  2 root root 4.0K Mar 26 18:23 exercise\r\n-rw-r--r--. 1 root root  22K Feb  2 00:40 install.log\r\n-rw-r--r--. 1 root root 5.8K Feb  2 00:38 install.log.syslog\r\n-rw-r--r--  1 root root  388 Mar 24 15:59 maxiaoyu.txt\r\n-rw-r--r--  1 root root  638 Apr  2 16:07 mysql_master_slave.sh\r\n-rw-------  1 root root    0 Mar  5 17:11 nohup.out\r\n\r\n```\r\n按照时间顺序显示出来：\r\n\r\n```\r\n[root@db02 ~]# ls -lt\r\ntotal 63936\r\n-rw-r--r--  1 root root      185 Apr  2 16:12 test.txt\r\n-rw-r--r--  1 root root      638 Apr  2 16:07 mysql_master_slave.sh\r\ndrwxr-xr-x  2 root root     4096 Mar 26 18:23 exercise\r\n-rw-r--r--  1 root root      388 Mar 24 15:59 maxiaoyu.txt\r\n-rw-------  1 root root        0 Mar  5 17:11 nohup.out\r\ndrwxr-xr-x  2 root root     4096 Feb 28 16:49 bash_scripts\r\n-rw-rw-r--  1 root root 41925772 Feb 27 20:24 percona-xtrabackup-24-debuginfo-2.4.6-2.el6.x86_64.rpm\r\n-rw-rw-r--  1 root root 15194300 Feb 27 20:24 percona-xtrabackup-test-24-2.4.6-2.el6.x86_64.rpm\r\n-rw-rw-r--  1 root root  8278704 Feb 27 20:24 percona-xtrabackup-24-2.4.6-2.el6.x86_64.rpm\r\ndrwxr-xr-x. 3 root root     4096 Feb  3 08:49 python\r\n-rw-------. 1 root root     1139 Feb  2 00:40 anaconda-ks.cfg\r\n-rw-r--r--. 1 root root    22179 Feb  2 00:40 install.log\r\n-rw-r--r--. 1 root root     5890 Feb  2 00:38 install.log.syslog\r\n```\r\n倒序显示：\r\n\r\n```\r\n[root@db02 ~]# ls -ltr\r\ntotal 63936\r\n-rw-r--r--. 1 root root     5890 Feb  2 00:38 install.log.syslog\r\n-rw-r--r--. 1 root root    22179 Feb  2 00:40 install.log\r\n-rw-------. 1 root root     1139 Feb  2 00:40 anaconda-ks.cfg\r\ndrwxr-xr-x. 3 root root     4096 Feb  3 08:49 python\r\n-rw-rw-r--  1 root root  8278704 Feb 27 20:24 percona-xtrabackup-24-2.4.6-2.el6.x86_64.rpm\r\n-rw-rw-r--  1 root root 15194300 Feb 27 20:24 percona-xtrabackup-test-24-2.4.6-2.el6.x86_64.rpm\r\n-rw-rw-r--  1 root root 41925772 Feb 27 20:24 percona-xtrabackup-24-debuginfo-2.4.6-2.el6.x86_64.rpm\r\ndrwxr-xr-x  2 root root     4096 Feb 28 16:49 bash_scripts\r\n-rw-------  1 root root        0 Mar  5 17:11 nohup.out\r\n-rw-r--r--  1 root root      388 Mar 24 15:59 maxiaoyu.txt\r\ndrwxr-xr-x  2 root root     4096 Mar 26 18:23 exercise\r\n-rw-r--r--  1 root root      638 Apr  2 16:07 mysql_master_slave.sh\r\n-rw-r--r--  1 root root      185 Apr  2 16:12 test.txt\r\n```\r\n### 4.cd\r\n>cd,全名change directory，即切换目录的意思。平常的用法也就是来回切换目录的，有一个用法是cd -，这个命令的意思是切换到刚才的目录，这个刚才的目录和一个变量有关即“$OLDPWD”。\r\n### 5.more\r\n>more命令也是可以查看文件内容的一个命令，但是不同于cat的地方是针对打的文件，一屏幕显示不完的不会一气全部都打印出来，而是允许你翻页，甚至允许你一行一行的看。\r\n\r\n常用参数：\r\n- 空格：向下翻页（一屏）\r\n- b：小写的b键，可以上翻页\r\n- h：小写的h按键可以查看帮助\r\n- 回车：一行一行的向下翻\r\n- =：查看当前行号\r\n- /：斜杠后面接关键字，可以实现搜索的功能。\r\n- z：向下滚动一屏\r\n\r\n我想十行十行的查看：\r\n\r\n```\r\n[root@db02 ~]# more -10 /etc/services\r\n# /etc/services:\r\n# $Id: services,v 1.48 2009/11/11 14:32:31 ovasik Exp $\r\n#\r\n# Network services, Internet style\r\n# IANA services version: last updated 2009-11-10\r\n#\r\n# Note that it is presently the policy of IANA to assign a single well-known\r\n# port number for both TCP and UDP; hence, most entries here have two entries\r\n# even if the protocol doesn\'t support UDP operations.\r\n# Updated from RFC 1700, ``Assigned Numbers\'\' (October 1994).  Not all ports\r\n```\r\n### 6.less\r\n>和more类似，但是比more更好用\r\n\r\n- 上下左右（方向键）：\r\n- -N：显示行号\r\n\r\n### 7.head\r\n同样是查看文件的命令，只不过就是查看方式不一样罢了，这个默认就是默认显示文件的前十行\r\n\r\n- head -3 filename：查看文件的前3行，这种写法是简写的，原始写法是head -n 3 filename\r\n- head -n -3 filename：在行数前面加一个-，表示我显示所有，但是除了最后三行。\r\n\r\n### 8.tail\r\n>这个用法和head挺类似的，head是从前往后看，tail是从后往前看。但是tail命令还有一个监控文件的功能\r\n\r\n- -f：监控一个文件的动态变化，比如我们可以用来监控日志文件。\r\n- -F：和f一样的功能，但是-F可以监控不存的文件，意思就是加入我要监控的一个文件不存在，那么我会告诉你这个文件不存在但是我不会报错，我会继续监控，然后如果我创建了这个文件那么就可以开始监控了。\r\n\r\n### 9.file\r\n>file命令的作用是确定文件的类型，当你不确定某个文件到底是什么类型的文件的时候你就可以使用file命令来来确定\r\n\r\n```\r\n[root@db02 ~]# file /bin/ls     \r\n/bin/ls: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.18, stripped\r\n[root@db02 ~]# file ./test.txt\r\n./test.txt: ASCII text\r\n```\r\n\r\n### 10.diff\r\n> diff命令在最简单的情况下，比较给定的两个文件的不同。如果使用“-”代替“文件”参数，则要比较的内容将来自标准输入。diff命令是以逐行的方式，比较文本文件的异同处。如果该命令指定进行目录的比较，则将会比较该目录中具有相同文件名的文件，而不会对其子目录文件进行任何比较操作。\r\n\r\n这里仅仅记录最简单的用法：\r\n\r\n```\r\ndiff filename1 filename2\r\n\r\n[root@db02 ~]# diff test.txt test2.txt         \r\ndiff: test2.txt: No such file or directory\r\nYou have new mail in /var/spool/mail/root\r\n[root@db02 ~]# diff test.txt test.txt2\r\n1c1\r\n< root:x:0:0:root:/root:/bin/bash\r\n---\r\n> lamber:x:0:0:root:/root:/bin/bash\r\n4c4\r\n< line 4\r\n---\r\n>\r\n6a7\r\n> this is test.txt2\r\n```\r\n其中，字母\"a\"、\"d\"、\"c\"分别表示添加、删除及修改操作。而\"n1\"、\"n2\"表示在文件1中的行号，\"n3\"、\"n4\"表示在文件2中的行号。\r\n","timestamp":1525331868024},{"name":"001-Tomcat基础部署.md","path":"01-Linux运维/002-Linux运维基础/002-运维常用业务部署/01-Tomcat/001-Tomcat基础部署.md","content":"# Tomcat基础部署\n\n## 统一用户\n\n```\n[root@web01 tools]# useradd -u 601 tomcat\n[root@web01 tools]# passwd tomcat\nChanging password for user tomcat.\nNew password: \nBAD PASSWORD: it is based on a dictionary word\nBAD PASSWORD: is too simple\nRetype new password: \npasswd: all authentication tokens updated successfully.\n[root@web01 tools]# id tomcat\nuid=601(tomcat) gid=601(tomcat) groups=601(tomcat)\n```\n\n## 部署JDK和Tomcat\n\n\n```\n[root@web01 tools]# tar xf jdk-8u121-linux-x64.tar.gz \n[root@web01 tools]# mv jdk1.8.0_121/ /usr/local/\n[root@web01 tools]# ln -s /usr/local/jdk1.8.0_121/ /usr/local/jdk\n[root@web01 tools]# tar xf apache-tomcat-8.5.13.tar.gz \n[root@web01 tools]# mv apache-tomcat-8.5.13 /usr/local/\n[root@web01 tools]# ln -s /usr/local/apache-tomcat-8.5.13/ /usr/local/tomcat\n```\n\n### 设置环境变量\n\n```\nexport JAVA_HOME=/usr/local/jdk\nexport PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH\nexport CLASSPATH=.$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib:$JAVA_HOME/lib/tools.jar\nexport TOMCAT_HOME=/usr/local/tomcat/\n\n添加到profile文件中\n[root@web01 local]# source /etc/profile\n```\n\n确认tomcat的版本号：\n\n```\n[tomcat@lamber tomcat]$ ./bin/version.sh \nUsing CATALINA_BASE:   /usr/local/tomcat\nUsing CATALINA_HOME:   /usr/local/tomcat\nUsing CATALINA_TMPDIR: /usr/local/tomcat/temp\nUsing JRE_HOME:        /usr/local/jdk\nUsing CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar\nServer version: Apache Tomcat/8.5.16\nServer built:   Jun 21 2017 17:01:09 UTC\nServer number:  8.5.16.0\nOS Name:        Linux\nOS Version:     2.6.32-042stab093.5\nArchitecture:   amd64\nJVM Version:    1.8.0_121-b13\nJVM Vendor:     Oracle Corporation\n```\n\n## 启动tomcat\n\n\n```\n[root@web01 ~]# chown -R tomcat.tomcat /usr/local/jdk /usr/local/tomcat/\n[root@web01 ~]# su - tomcat\n[tomcat@web01 ~]$ java -version\njava version \"1.8.0_121\"\nJava(TM) SE Runtime Environment (build 1.8.0_121-b13)\nJava HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)\n```\n注意所有的web服务器在初始化的时候一定要修改ulimit\n\n```\n[tomcat@web01 ~]$ /usr/local/tomcat/bin/startup.sh \nUsing CATALINA_BASE:   /usr/local/tomcat\nUsing CATALINA_HOME:   /usr/local/tomcat\nUsing CATALINA_TMPDIR: /usr/local/tomcat/temp\nUsing JRE_HOME:        /usr/local/jdk\nUsing CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar\nTomcat started.\n\n[tomcat@web01 ~]$ netstat -lntup | grep 8080\n(Not all processes could be identified, non-owned process info\n will not be shown, you would have to be root to see it all.)\ntcp        0      0 :::8080                     :::*                        LISTEN      7764/java \n```\n配置管理用户\n\n```\n[tomcat@web01 conf]$ vim tomcat-users.xml \n<role rolename=\"manager-gui\" />\n<role rolename=\"admin-gui\" />\n<user username=\"tomcat\" password=\"redhat\" roles=\"manager-gui,admin-gui\" />\n```\n重启Tomcat\n\n```\n[tomcat@web01 tomcat]$ bin/shutdown.sh \nUsing CATALINA_BASE:   /usr/local/tomcat\nUsing CATALINA_HOME:   /usr/local/tomcat\nUsing CATALINA_TMPDIR: /usr/local/tomcat/temp\nUsing JRE_HOME:        /usr/local/jdk\nUsing CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar\n[tomcat@web01 tomcat]$ bin/startup.sh \nUsing CATALINA_BASE:   /usr/local/tomcat\nUsing CATALINA_HOME:   /usr/local/tomcat\nUsing CATALINA_TMPDIR: /usr/local/tomcat/temp\nUsing JRE_HOME:        /usr/local/jdk\nUsing CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar\nTomcat started.\n```\n如果写一个重启脚本的话就是先kill tomcat然后等待20~30s，看看有没有杀掉进程，如果没有杀掉就采用强制手段kill -9。然后清空temp和work目录下的临时文件。\n\n简易版本tomcat启动脚本：\n\n```\n[tomcat@web01 bin]$ cat tomcat.sh \n#!/bin/sh\nTOMCAT_PATH=/usr/local/tomcat\n\nusage(){\n  echo \"Usage: $0 [start|stop]\"\n}\nstatus(){\n ps -ef | grep java | grep tomcat | grep -v grep\n}\n\nstart(){\n  /usr/local/tomcat/bin/startup.sh\n}\n\nstop(){\n  TPID=$(ps -ef | grep java | grep tomcat | grep -v grep | awk \'{print $2}\')\n  kill -9 $TPID\n  sleep 5;\n\n  TSTAT=$(ps -ef | grep java | grep tomcat | grep -v grep | awk \'{print $2}\')\n     if [ -z $TSTAT ];then\n       echo \"tomcat stop\"\n     else \n       kill -9 $TSTAT\n     fi\n\ncd $TOMCAT_PATH\nrm temp/* -rf\nrm work/* -rf\n}\n\nmain(){\ncase $1 in\n  start)\n     start\n     ;;\n  stop)\n     stop\n     ;;\n  status)\n     status\n     ;;\n  *)\n     usage\n     ;;\nesac\n\n}\n\nmain $1;\n```\n我们去访问tomcat对应的界面：\n\n![](http://omk1n04i8.bkt.clouddn.com/17-4-15/88556304-file_1492222305346_4c4b.jpg)\n\n但是直接访问的话会报错403，因此需要对以下文件进行相应的改动，比如我要访问manager页面：\n\n```\n[tomcat@web01 ~]$ cd /usr/local/tomcat/webapps/manager/META-INF\n[tomcat@web01 META-INF]$ vim context.xml \nallow=\"10.0.0.*\" />\n修改访问权限\n```\n如果你想要访问的话这个访问权限是必须开启的，默认是127.0.0.x。也就是只能本机，所以不改的话直接403，连输入账号密码的机会都没有。但是这个有些是不安全的，因此建议只留下Server status，其他的关闭或者直接移动到别的地方去。\n\n## Tomcat安全管理规范\n\n- 用户设置统一\n- 内部地址下载\n- 版本统一","timestamp":1525331868024},{"name":"002-Tomcat目录结构.md","path":"01-Linux运维/002-Linux运维基础/002-运维常用业务部署/01-Tomcat/002-Tomcat目录结构.md","content":"","timestamp":1525331868024},{"name":"003-Tomcat的日志.md","path":"01-Linux运维/002-Linux运维基础/002-运维常用业务部署/01-Tomcat/003-Tomcat的日志.md","content":"http://xstarcd.github.io/wiki/Java/tomcat_log.html","timestamp":1525331868024},{"name":"006-Tomcat配置https.md","path":"01-Linux运维/002-Linux运维基础/002-运维常用业务部署/01-Tomcat/006-Tomcat配置https.md","content":"## 配置Tomcat HTTPS\n\n","timestamp":1525331868024},{"name":"001-概念性的问题.md","path":"01-Linux运维/002-Linux运维基础/002-运维常用业务部署/06-LNMP/001-概念性的问题.md","content":"## 理论知识\r\n\r\n### CGI\r\n\r\nCGI全称是“公共网关接口”(Common Gateway Interface)，HTTP服务器与你的或其它机器上的程序进行“交谈”的一种工具，其程序须运行在网络服务器上。\r\n\r\nCGI可以用任何一种语言编写，只要这种语言具有标准输入、输出和环境变量。如php,perl,tcl等。\r\n\r\n### FastCGI\r\n\r\nFastCGI像是一个常驻(long-live)型的CGI，它可以一直执行着，只要激活后，不会每次都要花费时间去fork一次（这是CGI最为人诟病的fork-and-execute 模式）。它还支持分布式的运算，即 FastCGI 程序可以在网站服务器以外的主机上执行并且接受来自其它网站服务器来的请求。\r\n\r\nFastCGI是语言无关的、可伸缩架构的CGI开放扩展，其主要行为是将CGI解释器进程保持在内存中并因此获得较高的性能。众所周知，CGI解释器的反复加载是CGI性能低下的主要原因，如果CGI解释器保持在内存中并接受FastCGI进程管理器调度，则可以提供良好的性能、伸缩性、Fail- Over特性等等。\r\n\r\n#### FastCGI特点\r\n\r\nFastCGI具有语言无关性.\r\nFastCGI在进程中的应用程序，独立于核心web服务器运行，提供了一个比API更安全的环境。APIs把应用程序的代码与核心的web服务器链接在一起，这意味着在一个错误的API的应用程序可能会损坏其他应用程序或核心服务器。 恶意的API的应用程序代码甚至可以窃取另一个应用程序或核心服务器的密钥。\r\nFastCGI技术目前支持语言有：C/C++、Java、Perl、Tcl、Python、SmallTalk、Ruby等。相关模块在Apache, ISS, Lighttpd等流行的服务器上也是可用的。\r\nFastCGI的不依赖于任何Web服务器的内部架构，因此即使服务器技术的变化, FastCGI依然稳定不变。\r\n\r\n#### FastCGI的工作原理\r\n\r\nWeb Server启动时载入FastCGI进程管理器（IIS ISAPI或Apache Module)\r\nFastCGI进程管理器自身初始化，启动多个CGI解释器进程(可见多个php-cgi)并等待来自Web Server的连接。\r\n当客户端请求到达Web Server时，FastCGI进程管理器选择并连接到一个CGI解释器。Web server将CGI环境变量和标准输入发送到FastCGI子进程php-cgi。\r\nFastCGI子进程完成处理后将标准输出和错误信息从同一连接返回Web Server。当FastCGI子进程关闭连接时，请求便告处理完成。FastCGI子进程接着等待并处理来自FastCGI进程管理器(运行在Web Server中)的下一个连接。 在CGI模式中，php-cgi在此便退出了。\r\n在上述情况中，你可以想象CGI通常有多慢。每一个Web请求PHP都必须重新解析php.ini、重新载入全部扩展并重初始化全部数据结构。使用FastCGI，所有这些都只在进程启动时发生一次。一个额外的好处是，持续数据库连接(Persistent database connection)可以工作。\r\n\r\n#### FastCGI的不足\r\n\r\n因为是多进程，所以比CGI多线程消耗更多的服务器内存，PHP-CGI解释器每进程消耗7至25兆内存，将这个数字乘以50或100就是很大的内存数。\r\n\r\nNginx 0.8.46+PHP 5.2.14(FastCGI)服务器在3万并发连接下，开启的10个Nginx进程消耗150M内存`（15M*10=150M）`，开启的64个php-cgi进程消耗1280M内存（20M*64=1280M），加上系统自身消耗的内存，总共消耗不到2GB内存。如果服务器内存较小，完全可以只开启25个php-cgi进程，这样php-cgi消耗的总内存数才500M。\r\n上面的数据摘自Nginx 0.8.x + PHP 5.2.13(FastCGI)搭建胜过Apache十倍的Web服务器(第6版)\r\n\r\n### PHP-CGI\r\n\r\nPHP-CGI是PHP自带的FastCGI管理器。\r\n\r\nPHP-CGI的不足：\r\n\r\nphp-cgi变更php.ini配置后需重启php-cgi才能让新的php-ini生效，不可以平滑重启。\r\n直接杀死php-cgi进程，php就不能运行了。(PHP-FPM和Spawn-FCGI就没有这个问题，守护进程会平滑从新生成新的子进程。）\r\n\r\n#### PHP-FPM\r\n\r\nPHP-FPM是一个PHP FastCGI管理器，是只用于PHP的，可以在 http://php-fpm.org/download下载得到。\r\n\r\nPHP-FPM其实是PHP源代码的一个补丁，旨在将FastCGI进程管理整合进PHP包中。必须将它patch到你的PHP源代码中，在编译安装PHP后才可以使用。\r\n\r\n现在我们可以在最新的PHP 5.3.2的源码树里下载得到直接整合了PHP-FPM的分支，据说下个版本会融合进PHP的主分支去。相对Spawn-FCGI，PHP-FPM在CPU和内存方面的控制都更胜一筹，而且前者很容易崩溃，必须用crontab进行监控，而PHP-FPM则没有这种烦恼。\r\n\r\nPHP5.3.3已经集成php-fpm了，不再是第三方的包了。PHP-FPM提供了更好的PHP进程管理方式，可以有效控制内存和进程、可以平滑重载PHP配置，比spawn-fcgi具有更多有点，所以被PHP官方收录了。在./configure的时候带 –enable-fpm参数即可开启PHP-FPM。\r\n\r\n#### Spawn-FCGI\r\n\r\nSpawn-FCGI是一个通用的FastCGI管理服务器，它是lighttpd中的一部份，很多人都用Lighttpd的Spawn-FCGI进行FastCGI模式下的管理工作，不过有不少缺点。而PHP-FPM的出现多少缓解了一些问题，但PHP-FPM有个缺点就是要重新编译，这对于一些已经运行的环境可能有不小的风险(refer)，在php 5.3.3中可以直接使用PHP-FPM了。\r\n\r\nSpawn-FCGI目前已经独成为一个项目，更加稳定一些，也给很多Web 站点的配置带来便利。已经有不少站点将它与nginx搭配来解决动态网页。\r\n\r\n最新的lighttpd也没有包含这一块了(http://www.lighttpd.net/search?q=Spawn-FCGI)，但可以在以前版本中找到它。在lighttpd-1.4.15版本中就包含了(http://www.lighttpd.net/download/lighttpd-1.4.15.tar.gz)，目前Spawn-FCGI的下载地址是http://redmine.lighttpd.net/projects/spawn-fcgi，最新版本是http://www.lighttpd.net/download/spawn-fcgi-1.6.3.tar.gz。\r\n\r\n注：最新的Spawn-FCGI可以到lighttpd.net网站搜索“Spawn-FCGI”找到它的最新版本发布地址。\r\n\r\n#### PHP-FPM与spawn-CGI对比\r\n\r\nPHP-FPM的使用非常方便，配置都是在PHP-FPM.ini的文件内，而启动、重启都可以从php/sbin/PHP-FPM中进行。更方便的是修改php.ini后可以直接使用PHP-FPM reload进行加载，无需杀掉进程就可以完成php.ini的修改加载\r\n结果显示使用PHP-FPM可以使php有不小的性能提升。PHP-FPM控制的进程cpu回收的速度比较慢,内存分配的很均匀。\r\nSpawn-FCGI控制的进程CPU下降的很快，而内存分配的比较不均匀。有很多进程似乎未分配到，而另外一些却占用很高。可能是由于进程任务分配的不均匀导致的。而这也导致了总体响应速度的下降。而PHP-FPM合理的分配，导致总体响应的提到以及任务的平均。\r\n","timestamp":1525331868024},{"name":"002-认识Nginx.md","path":"01-Linux运维/002-Linux运维基础/002-运维常用业务部署/06-LNMP/002-认识Nginx.md","content":"## 认识Ningx\r\nNginx是一个开源的，支持高性能，高并发的www服务和代理服务软件。（engine x）\r\nNginx具有高并发（静态资源，小文件），占用系统资源少等特性，且功能逐渐完善\r\n具有web服务软件的功能，还具有反向代理负载均衡功能和缓存服务功能，在反向代理负载均衡方面类似于LVS负载均衡以及Haproxy专业代理软件，但是Nginx部署起来更为简单，方便，在缓存功能方面它又类似于squid等专业的缓存服务软件\r\n\r\n## Nginx HTTP服务器的特色以及优点：\r\n1. 支持高并发。能支持几万并发连接（特别是静态小文件业务环境）\r\n2. 资源消耗少：在3万并发连接下，开启10个nginx线程消耗不到200M内存\r\n3. 可以做HTTP反向代理及加速缓存，即负债均衡功能，内置对RS节点服务器健康检查功能，这相当于专业的haproxy软件或lvs功能\r\n4. 具备squid等专业缓存软件等的缓存功能\r\n5. 支持异步网络IO时间模型epoll（Linux2.6+）\r\n\r\n**关于同步和异步**\r\n\r\n类似于UDP和TCP的无链接的和有链接的。同步的效率并不高。但是异步效率高也有缺点，就是类似于UDP，安全性可靠性不高。\r\n## 代理\r\n- 反向代理：代替外部用户请求web服务器\r\n- 正向代理：服务器通过代理服务器去访问一些网站，这叫正向代理。\r\n\r\n## Nginx做为web服务器的主要应用场景：\r\n1. 使用Nginx运行HTML、JS、CSS、小图片等静态数据（此功能类似Lighttpd软件）\r\n2. Ngiinx结合FastCGI运行PHP等动态程序（例如fastcgi_pass方式）\r\n3. Nginx结合tomcat/resin等支持Java动态程序（常用proxy_pass方式）\r\n\r\n## 模型\r\n- Apache：基于传统的select模型（同步）。并发能力有限。\r\n- Nginx：不支持类似apache的DSO模式，扩展库必须编译进主程序（缺点）\r\n\r\n***\r\n### epoll模型和select 模型：\r\n##### epoll是异步的\r\n宿舍房间有多间，你的朋友来找你，select版本的大妈会带着你的朋友挨个房间去找，直到找到为止，epoll大妈会先记录下每位入住同学的房间号，当你的朋友来找你时，只需要告诉你的朋友你住在哪个房间里就可以了。如果同时来了100个人，epoll和select大妈的效率就立竿见影了。\r\n\r\n\r\n##### select是同步的\r\n另外一种理解：select的调度复杂度是线性的，举个例子，一个保姆照看一群孩子，如果把孩子是否需要尿尿比作是网络的IO事件，select的作用就好比这个保姆挨个询问每一个孩子是否要尿尿，如果孩子回答是的话，那么保姆则把还自己领出来放到另外一个地方。当所有孩子询问完以后，保姆领着这些要尿尿的孩子去上厕所（处理网络IO事件）\r\n还是以保姆照看一群孩子为例，在epoll机制下，保姆不再需要挨个询问每个孩子是否需要尿尿，取而代之的是，每个孩子如果想尿尿的话，自己主动的站到事先约定好的地方，而保姆的职责就是查看事先约定好的地方是否有孩子，如果有就带着小孩子去上厕所（处理IO事件），因此，epoll这种机制，能够高效的处理成千上万的并发连接，而且性能不会随着连接数增加而下降太多。\r\n\r\n静态高并发首选nginx\r\n避免同一个业务使用多款软件\r\n","timestamp":1525331868024},{"name":"01-Squid介绍和部署.md","path":"01-Linux运维/002-Linux运维基础/002-运维常用业务部署/08-Squid/01-Squid介绍和部署.md","content":"# Squid\r\n>缓存服务器（又可以称为代理服务器），即用来存储（介质为内存和硬盘）用户访问的网页，图片，文件等等细信息的专用服务器。这种服务器不仅可以使用户最快的得到他们想要的信息，而且可以大大减少服务端网络传输的数量。缓存服务器往往也是代理服务器，对于网站的用户来说，缓存服务器和代理服务器是不可见的，即在用户看来所有的网站信息都来自其正在访问的网站，而实际上可能是缓存服务器正在提供访问数据。目前国内常用的的缓存服务器有：squid，varnish，Nginx，ats。\r\n\r\nSquid官网网站 [http://www.squid-cache.org](http://www.squid-cache.org)\r\n\r\n## Web缓存相关概念\r\n### cache命中\r\ncache命中指的是cache server每次从它的缓存里满足客户端HTTP请求时发生。cache命中率，是所有客户端HTTP请求中命中的比例。Web缓存典型的命中率在30%~60%之间。另一个相似的度量单位叫做字节命中率，描绘了cache提供服务的数据容量（字节数）。\r\n#### 如何提高命中率？\r\n* apache nginx可以设置expires的cache-control缓冲头\r\n* 动静分离，静态化，对静态文件走CDN\r\n* mysql cache让缓存靠前\r\n### cache丢失\r\ncache丢失在cache server不能从它的换村里满足客户端HTTP请求的时候发生。cache丢失的原因有很多种。\r\n- 当第一次接收到用户请求的第一个新资源的时候，就会产生一个cache丢失。那么如何解决第一次命中？\r\n    - 预热或者预取，后端生成数据后统一推到前端。\r\n- 存储空间满或者对象自身过期，cache server会自动清除这些缓存对象以释放空间给新的对象。因此为了避免这个问题可以加大内存和磁盘，或者过期时间设置的长点；参数设置，缓存的参数设置的大一些，最大缓存对象2M。分资源缓存，比如1M的，10M的100M的，页面和视频进行分拆（通过acl或者正则匹配抛给不同的pools）。\r\n- 还有可能是客户访问的资源不可到达。原始服务器会指示cache server怎样处理用户响应，比如会提示数据不能被缓存，或在有限的时间内才被重复使用等等。\r\n### cache确认\r\ncache确认保证cache server不对访问的用户返回过期的数据。在重复使用缓存对象的时候，cache server需要经常从原始服务器确认它。假如服务器只是squid的拷贝仍然有效，数据就发送出去，否则，squid更新它的缓存拷贝，并且转发给客户。当用户更新了数据到数据库或者存储服务器的时候，就可以从业务角度主动调用该接口清除该对象缓存的指令。\r\n\r\n## Squid服务\r\n\r\n### Squid的用途\r\n- 用于放置在web服务器的前面，缓存网站web服务器的相关数据，这样用户请求缓存服务器就可以直接返回数据给用户了，从而提升了用户访问网站的体验，从另一方面也减轻了web服务器，数据库服务器的，图片文件存储服务器等业务的压力。这种应用也成为1反向代理业务。\r\n- 用于放置在企业内部关键出网位置或者共享网络的前端，缓存内部上网用户的数据，域名系统和其他网络搜索数据等。这样会大大的节约公司的带宽，这种应用被称之为正向代理（普通代理或者透明代理）\r\n- 通过放在网络的关键位置过滤网络流量和访问数据，提升整个网络的安全性，比如可以监控以及限制内部企业员工的上网行为，可以和iptables配合做为办公网的网关。\r\n- 用作局域网通过代理上网\r\n\r\n### 透明代理\r\n所谓透明代理是相对于代理服务器而言，客户端不需要做任何和代理服务器相关的设置和操作，对于用户而言，感受不到代理服务器的存在，所以称之为透明代理，即把代理服务器部署在核心的上网出口，当用户上网浏览页面的时候，会交给代理服务器向外请求，如果结合iptables可以实现代理+网关+内容过滤+流量安全控制等完整的上网解决方案。\r\n\r\n### 反向代理\r\n普通代理方式是代理内部网络用户访问Internet，反向代理服务器是指的代理服务器来接受来自internet上的请求，然后将请求转发给内部网络上的服务器，并将从内部服务器上得到的结果返回给internet上请求链接的客户端，此时代理服务武器对外就表现为一个服务器。\r\n\r\n## Squid部署\r\n>磁盘和内存的关联，因为squid对每个缓存响应使用少数内存，因此在磁盘空间和内存要求之间有一定的联系，基本规则是，每个G次哦按空间需要32M内存，这样，512M内存的系统能支持16G的磁盘缓存。根据情况不同，实际情况也不一样，内存需求依赖于如下的事实：缓存目标大小，CPU体系（32为或64位），同时在线的用户数量和你使用的特殊功能。\r\n\r\n### 虚拟机测试环境\r\n- 内存：大于等于512M\r\n- 硬盘：8-16G或更高\r\n- VM：1-2个牟其中一个部署缓存服务器，一个部署web服务器做测试使用。\r\n\r\n名称 | 接口 | IP | 用途\r\n---|---|---|---|\r\nSquid server | eth0 | 10.0.0.7 | 外网管理IP，用于WAN数据转发\r\nWeb Server | eth0 | 10.0.0.8 | 外网管理IP，用于WAN数据转发\r\n\r\n#### 软件下载安装\r\n\r\n```\r\nyum -y install openssl-devel\r\nwget http://www.squid-cache.org/Versions/v3/3.0/squid-3.0.STABLE20.tar.gz\r\ntar xf squid-3.0.STABLE20.tar.gz\r\ncd /tools/squid-3.0.STABLE20\r\n\r\n```\r\n#### 编译参数：\r\n\r\n```\r\n[root@web02 squid-3.0.STABLE20]# ./configure --prefix=/application/squid3.0 \\\r\n--enable-async-io=100 \\\r\n--with-pthreads \\\r\n--enable-storeio=\"aufs,diskd,ufs\" \\\r\n--enable-removal-policies=\"heap,lru\" \\\r\n--enable-icmp \\\r\n--enable-delay-pools \\\r\n--enable-useragent-log \\\r\n--enable-referer-log \\\r\n--enable-kill-parent-hack \\\r\n--enable-cachemgr-hostname=localhost \\\r\n--enable-arp-acl \\\r\n--enable-default-err-language=English \\\r\n--enable-err-languages=\"Simplify_Chinese English\" \\\r\n--disable-poll \\\r\n--disable-wccp \\\r\n--disable-wccpv2 \\\r\n--disable-internal-dns \\\r\n--enable-basic-auth-helpers=\"NCSA\" \\\r\n--enable-stacktrace \\\r\n--with-large-files \\\r\n--disable-mempools \\\r\n--with-filedescriptors=64000 \\\r\n--enable-ssl \\\r\n--enable-x-accelerator-vary \\\r\n--disable-snmp \\\r\n--with-aio \\\r\n--enable-linux-netfilter \\\r\n--enable-linux-tproxy\r\n```\r\n#### 安装\r\n\r\n```\r\nmake && make install\r\n[root@cache-server application]# ln -s /application/squid3.0/ /application/squid\r\n```\r\n\r\n\r\n#### 关于编译参数的说明\r\n\r\n```\r\n--prefix=/application/squid3.0 \\                     \r\n##指定安装位置是哪里默认是/usr/local/squid\r\n--enable-async-io=100 \\\r\n##使用100个线程进行同步IO\r\n--with-pthreads \\\r\n##使用POSIX（可移植性操作系统接口）线程\r\n--enable-storeio=\"aufs,diskd,ufs\" \\                  \r\n##支持ufs和aufs文件存储\r\n--enable-removal-policies=\"heap,lru\" \\\r\n##指定排除元素，排除元素是squid需要腾出空间给新的cache目标，用以排除旧的目标的机制，squid在2.5的时候支持3个排除元素：最少近期使用（LRU）、贪婪对偶大小（GDS）、最少经常使用（LFU）\r\n--enable-icmp \\                                      \r\n##squid利用icmp消息来确定回环试件尺寸，非常像ping程序。目的是激活netdb，必须使用--enable-icmp选项来配置squiid，也必须以超级用户权限来安装pinger程序。\r\n--enable-delay-pools \\\r\n##启用延迟池，，延迟池是squid用于传输形状或带宽限制的技术。该池由大量的客户端IP地址组成，当来自这些客户端的请求处理cache丢失状态，它们的响应可能被人工延迟\r\n--enable-useragent-log \\\r\n##该选项用来激活来自客户请求的HTTP用户代理头的日志\r\n--enable-referer-log \\\r\n##激活客户请求的HTTP referer日志\r\n--enable-kill-parent-hack \\\r\n##Useful for hackers only\r\n--enable-cachemgr-hostname=localhost \\\r\n--enable-arp-acl \\\r\n##squid在一些操作系统中支持ARP，或者acl，该代码使用非标准的函数接口来执行arp访问控制列表，所以它被默认禁止，假如你在linux或solaris上使用squid，你可能用上这个功能\r\n--enable-default-err-language=English \\\r\n##设置error_directory指令的默认值\r\n--enable-err-languages=\"Simplify_Chinese English\" \\\r\n##指定复制到安装目录($prefix/share/errors)的语言，不指定安装所有\r\n--disable-poll \\                                    \r\n##强制使用“poll()”函数扫描文件描述符\r\n--disable-wccp \\\r\n##禁用wccp协议\r\n--disable-wccpv2 \\\r\n##禁用wccp协议v2\r\n--disable-internal-dns \\\r\n##禁用内部dns\r\n--enable-basic-auth-helpers=\"NCSA\" \\\r\n##设置基础帮助名单\r\n--enable-stacktrace \\\r\n##启用崩溃追踪，squid崩溃后会自动记录cache.log\r\n--with-large-files \\\r\n##启用大文件服务\r\n--disable-mempools \\\r\n--with-filedescriptors=64000 \\\r\n##默认文件描述符是65535\r\n--enable-ssl \\\r\n--enable-x-accelerator-vary \\\r\n##该高级功能可能在squid被配置成加速器的时候使用，他建议squid在响应请求时，从后台原始服务器中寻找X-Acceleerator-Vary头\r\n--disable-snmp \\\r\n--with-aio \\\r\n--enable-linux-netfilter \\\r\n--enable-linux-tproxy\r\n##上面这两个参数在\r\n```\r\n","timestamp":1525331868024},{"name":"02-Squid的特性.md","path":"01-Linux运维/002-Linux运维基础/002-运维常用业务部署/08-Squid/02-Squid的特性.md","content":"# Squid的特性\r\n## 文件目录结构\r\n```\r\n[root@cache-server application]# tree -L 2 /application/squid\r\n/application/squid\r\n├── bin\r\n│   ├── RunAccel\r\n│   ├── RunCache\r\n│   └── squidclient\r\n├── etc\r\n│   ├── cachemgr.conf\r\n│   ├── cachemgr.conf.default\r\n│   ├── mime.conf\r\n│   ├── mime.conf.default\r\n│   ├── squid.conf\r\n│   └── squid.conf.default\r\n├── libexec\r\n│   ├── cachemgr.cgi\r\n│   ├── diskd\r\n│   ├── dnsserver\r\n│   ├── ncsa_auth\r\n│   ├── pinger\r\n│   └── unlinkd\r\n├── sbin\r\n│   └── squid\r\n├── share\r\n│   ├── errors\r\n│   ├── icons\r\n│   ├── man\r\n│   └── mib.txt\r\n└── var\r\n    └── logs\r\n```\r\n接下来对目录以及文件进行说明：\r\n\r\n文件名/目录名| 功能描述\r\n---|---\r\nsbin | squid主从程序目录，正常只能被root启动\r\nsbin/squid | squid的主程序\r\nbin | bin目录包含对所有用户可用的程序\r\nbin/Runcache | Runcache是一个shell脚本，你能用它来启动squid，假如squid死掉，该脚本自动重启它，除非它检测到经常性的重启\r\nbin/RunAccel | RunAccel与Runcache几乎一致，唯一的不同是它增加了一个命令行参数，告诉squid在哪里侦听HTTP请求。\r\nbin/squidclient | squidclient是一个简单的HTTP客户端程序，你能用他来测试squid。它也有一些特殊功能，用以对运行的squid进程发起管理请求\r\nlibexec | libexec程序目录包含了辅助程序，有一些命令你不能正常的启动，然而这些程序通常被其他程序启动。\r\nlinexec/unlinkd | unlinkd就是一个辅助程序，它从cache目录里删除文件\r\nlibexec/cachemgr.cgi | cachemgr.cgi是squid管理功能的CGI接口。为了使用它，你需要拷贝该程序到你的web服务器的cgi-bin目录\r\nlibexec/diskd | 假如你指定了--enable-storeio=diskd，你才能看到它\r\nlibexec/pinger | 假如你指定了--enable-icmp，你才能看到它\r\netc | squid的配置文件目录\r\netc/squid.conf | squid主配置文件\r\nvar | 包含了不是很重要的和经常变化的文件，这些文件不必正常的备份他们\r\nvar/logs | 这个目录是squid不同日志文件的默认位置。当你第一次安装squid的时候，它是空的，一旦squid开始运行，你能在这里看到名字为acces.log，cache.log和store.log这样的文件\r\nvar/cache | 假如你不在squid.conf文件里指定，这是默认的缓存目录（cache_dir）\r\n\r\n## 配置Squid\r\n为了保证squid能够正常使用，我们需要对squid进行一系列的配置，和其他的应用一样，squid的运行也需要有一个账户，默认如果不指定的话那就是nobody\r\n\r\n```\r\ncache_effective_user squid\r\ncache_effective_group squid\r\n```\r\n修改squid的日志记录信息\r\n\r\n```\r\naccess_log /application/squid3.0/var/logs/access.log squid\r\ncache_log /application/squid3.0/var/logs/cache.log\r\ncache_store_log /application/squid3.0/var/logs/store.log\r\n```\r\n打开磁盘的缓存\r\n\r\n```\r\ncache_dir ufs /application/squid3.0/var/cache 100 16 256\r\n```\r\nSquid的端口号（默认端口号是3128），如果要做缓存服务器要改成80，如果要做代理那么就不用管，当然这个http_port可以写多个。\r\n\r\n```\r\nhttp_port 3128\r\n```\r\n配置主机名：\r\n\r\n```\r\nvisible_hostname img01.etiantian.org\r\n```\r\n配置管理员信息：\r\n\r\n```\r\ncache_mgr 1020561033@qq.com\r\n```\r\n\r\n## Squid的日志文件\r\nsquid有三个主要的日志文件：cache.log access.log store.log\r\n- cache.log：squid的配置信息，性能警告，以及严重错误\r\n- access.log：记录访问日志\r\n- store.log：有关存储或者删除cache目标的记录\r\n","timestamp":1525331868024},{"name":"03-Squid服务应用.md","path":"01-Linux运维/002-Linux运维基础/002-运维常用业务部署/08-Squid/03-Squid服务应用.md","content":"# Squid服务应用\r\n## 运行Squid\r\n\r\n查看运行前的帮助：\r\n\r\n```\r\n[root@cache-server ~]# /application/squid/sbin/squid -h\r\nUsage: squid [-cdhvzCDFNRVYX] [-s | -l facility] [-f config-file] [-[au] port] [-k signal]\r\n       -a port   Specify HTTP port number (default: 3128).    ##指定新的http_port值，如果这里指定了这个选项，那么会覆盖配置文件中的那个值\r\n       -d level  Write debugging to stderr also.              ##让squid将它的调试信息写到标准错误\r\n       -f file   Use given config-file instead of             ##指定配置文件启动\r\n                 /application/squid3.0/etc/squid.conf\r\n       -h        Print help message.               \r\n       -k reconfigure|rotate|shutdown|interrupt|kill|debug|check|parse  ##指定squid执行不同的管理功能，功能参数这里都给列出来了。\r\n                 Parse configuration file, then send signal to\r\n                 running copy (except -k parse) and exit.\r\n       -s | -l facility\r\n                 Enable logging to syslog.         ##激活日志记录到syslog进程。squid使用LOCAL4 syslog设备。\r\n       -u port   Specify ICP port number (default: 3130), disable with 0.\r\n       -v        Print version.\r\n       -z        Create swap directories        ##初始化缓存\r\n       -C        Do not catch fatal signals.\r\n       -D        Disable initial DNS tests.     ##禁止初始化DNS测试，正常请工况下squid直到验证它的dns可用才会启动，该选项阻止了这样的检测。\r\n       -F        Don\'t serve any requests until store is rebuilt.\r\n       -N        No daemon mode.\r\n       -R        Do not set REUSEADDR on port.\r\n       -S        Double-check swap during rebuild.\r\n       -X        Force full debugging.\r\n       -Y        Only return UDP_HIT or UDP_MISS_NOFETCH during fast reload.\r\n```\r\n\r\n\r\n检查配置文件语法：\r\n\r\n```\r\n[root@cache-server etc]# /application/squid/sbin/squid -k parse\r\n2017/02/24 00:08:27| Processing Configuration File: /application/squid3.0/etc/squid.conf (depth 0)\r\n2017/02/24 00:08:27| cache_cf.cc(346) squid.conf:1707 unrecognized: \'/cache_dir\'\r\n2017/02/24 00:08:27| Initializing https proxy context\r\nWARNING: Cannot write log file: /application/squid3.0/var/logs/cache.log\r\n/application/squid3.0/var/logs/cache.log: Permission denied\r\n         messages will be sent to \'stderr\'.\r\n##这里发现有一个报错提示我们logs文件夹下没有可以写的权限，因此我们需要对目录进行授权。\r\n\r\n[root@cache-server etc]# chown -R squid.squid /application/squid/var/logs/\r\n\r\n##授权完成以后再次进行配置文件的语法检查\r\n[root@cache-server etc]# /application/squid/sbin/squid -k parse           \r\n2017/02/24 00:09:15| Processing Configuration File: /application/squid3.0/etc/squid.conf (depth 0)\r\n2017/02/24 00:09:15| cache_cf.cc(346) squid.conf:1707 unrecognized: \'/cache_dir\'\r\n2017/02/24 00:09:15| Initializing https proxy context\r\n```\r\n\r\n添加环境变量：\r\n\r\n```\r\n[root@cache-server ~]# echo \'export PATH=$PATH:/application/squid/sbin:/application/squid/bin\' >> /etc/profile\r\n[root@cache-server ~]# . /etc/profile\r\n[root@cache-server ~]# echo $PATH\r\n/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin:/application/squid/sbin:/application/squid/bin\r\n```\r\n初始化Cache_dir：\r\n\r\n```\r\n[root@cache-server ~]# chown -R squid /application/squid/var/\r\n[root@cache-server ~]# squid -z\r\n2017/02/24 00:24:55| cache_cf.cc(346) squid.conf:1707 unrecognized: \'/cache_dir\'\r\n2017/02/24 00:24:55| Creating Swap Directories\r\n2017/02/24 00:24:55| Making directories in /application/squid3.0/var/cache/00\r\n2017/02/24 00:24:55| Making directories in /application/squid3.0/var/cache/01\r\n2017/02/24 00:24:55| Making directories in /application/squid3.0/var/cache/02\r\n2017/02/24 00:24:55| Making directories in /application/squid3.0/var/cache/03\r\n2017/02/24 00:24:55| Making directories in /application/squid3.0/var/cache/04\r\n2017/02/24 00:24:55| Making directories in /application/squid3.0/var/cache/05\r\n2017/02/24 00:24:55| Making directories in /application/squid3.0/var/cache/06\r\n2017/02/24 00:24:55| Making directories in /application/squid3.0/var/cache/07\r\n2017/02/24 00:24:55| Making directories in /application/squid3.0/var/cache/08\r\n2017/02/24 00:24:55| Making directories in /application/squid3.0/var/cache/09\r\n2017/02/24 00:24:55| Making directories in /application/squid3.0/var/cache/0A\r\n2017/02/24 00:24:55| Making directories in /application/squid3.0/var/cache/0B\r\n2017/02/24 00:24:55| Making directories in /application/squid3.0/var/cache/0C\r\n2017/02/24 00:24:55| Making directories in /application/squid3.0/var/cache/0D\r\n2017/02/24 00:24:55| Making directories in /application/squid3.0/var/cache/0E\r\n2017/02/24 00:24:55| Making directories in /application/squid3.0/var/cache/0F\r\n```\r\n>可以看到上面的结构，记得我们调整cache_dir的时候对应的L1和L2的值么？L1对应的是16个也就是上面的16个目录，L2对应的是256个，意味着上面的每个文件夹下面还有256个目录，以后squid通过hash算法放到这些目录里。\r\n\r\n测试启动：\r\n\r\n```\r\n[root@cache-server etc]# squid -N -d1         \r\n2017/02/24 00:31:12| Starting Squid Cache version 3.0.STABLE20 for x86_64-unknown-linux-gnu...\r\n2017/02/24 00:31:12| Process ID 77759\r\n2017/02/24 00:31:12| With 4096 file descriptors available\r\n2017/02/24 00:31:12| Performing DNS Tests...\r\n2017/02/24 00:31:13| Successful DNS name lookup tests...\r\n2017/02/24 00:31:13| helperOpenServers: Starting 5/5 \'dnsserver\' processes\r\n2017/02/24 00:31:13| User-Agent logging is disabled.\r\n2017/02/24 00:31:13| Referer logging is disabled.\r\n2017/02/24 00:31:13| Unlinkd pipe opened on FD 14\r\n2017/02/24 00:31:13| Swap maxSize 102400 + 8192 KB, estimated 8507 objects\r\n2017/02/24 00:31:13| Target number of buckets: 425\r\n2017/02/24 00:31:13| Using 8192 Store buckets\r\n2017/02/24 00:31:13| Max Mem  size: 8192 KB\r\n2017/02/24 00:31:13| Max Swap size: 102400 KB\r\n2017/02/24 00:31:13| Version 1 of swap file without LFS support detected...\r\n2017/02/24 00:31:13| Rebuilding storage in /application/squid3.0/var/cache (CLEAN)\r\n2017/02/24 00:31:13| Using Least Load store dir selection\r\n2017/02/24 00:31:13| Set Current Directory to /application/squid3.0/var/cache\r\n2017/02/24 00:31:13| Loaded Icons.\r\n2017/02/24 00:31:13| Accepting  HTTP connections at 0.0.0.0, port 3128, FD 16.\r\n2017/02/24 00:31:13| Accepting ICP messages at 0.0.0.0, port 3130, FD 17.\r\n2017/02/24 00:31:13| HTCP Disabled.\r\n2017/02/24 00:31:13| Pinger socket opened on FD 19\r\n2017/02/24 00:31:13| Ready to serve requests.\r\n2017/02/24 00:31:13| Done reading /application/squid3.0/var/cache swaplog (0 entries)\r\n2017/02/24 00:31:13| Finished rebuilding storage from disk.\r\n2017/02/24 00:31:13|         0 Entries scanned\r\n2017/02/24 00:31:13|         0 Invalid entries.\r\n2017/02/24 00:31:13|         0 With invalid flags.\r\n2017/02/24 00:31:13|         0 Objects loaded.\r\n2017/02/24 00:31:13|         0 Objects expired.\r\n2017/02/24 00:31:13|         0 Objects cancelled.\r\n2017/02/24 00:31:13|         0 Duplicate URLs purged.\r\n2017/02/24 00:31:13|         0 Swapfile clashes avoided.\r\n2017/02/24 00:31:13|   Took 0.01 seconds (  0.00 objects/sec).\r\n2017/02/24 00:31:13| Beginning Validation Procedure\r\n2017/02/24 00:31:13|   Completed Validation Procedure\r\n2017/02/24 00:31:13|   Validated 25 Entries\r\n2017/02/24 00:31:13|   store_swap_size = 0\r\n2017/02/24 00:31:14| storeLateRelease: released 0 objects\r\n```\r\n如果看到`2017/02/24 00:31:13| Ready to serve requests.`这一行就证明启动成功了。\r\n\r\n查看端口占用情况：\r\n\r\n```\r\n[root@cache-server ~]# netstat -lntup | grep squid\r\ntcp        0      0 0.0.0.0:3128                0.0.0.0:*                   LISTEN      77759/squid         \r\nudp        0      0 0.0.0.0:3130                0.0.0.0:*                               77759/squid   \r\n```\r\n测试使用：\r\n\r\n![](http://omk1n04i8.bkt.clouddn.com/17-3-28/23053038-file_1490692421178_169eb.jpg)\r\n\r\n此时我们可以通过IE浏览器去访问一些网站然后发现是访问正常的，此时我们去查看squid的日志：\r\n\r\n```\r\n[root@cache-server ~]# tail /application/squid/var/logs/access.log  \r\n1487867890.006  59035 10.0.0.1 TCP_MISS/503 0 CONNECT clients1.google.com:443 - DIRECT/74.125.23.138 -\r\n1487867911.725  24281 10.0.0.1 TCP_MISS/200 657 POST http://bbs.dcgamer.top/json/get_notifications - DIRECT/60.211.204.165 application/json\r\n1487867912.622  10724 10.0.0.1 TCP_MISS/200 6076 CONNECT note.youdao.com:443 - DIRECT/123.58.182.251 -\r\n1487867912.884  10240 10.0.0.1 TCP_MISS/200 6264 CONNECT rpc3.note.youdao.com:443 - DIRECT/123.58.182.209 -\r\n1487867922.003  59465 10.0.0.1 TCP_MISS/503 0 CONNECT clients1.google.com:443 - DIRECT/74.125.23.113 -\r\n1487867924.918    771 10.0.0.1 TCP_MISS/200 1460 GET http://notify3.note.youdao.com/pushserver3/client? - DIRECT/123.58.182.253 text/json\r\n1487867927.219   1760 10.0.0.1 TCP_MISS/200 1460 GET http://notify3.note.youdao.com/pushserver3/client? - DIRECT/123.58.182.253 text/json\r\n1487867937.106  20206 10.0.0.1 TCP_MISS/200 7897 CONNECT note.youdao.com:443 - DIRECT/123.58.182.252 -\r\n1487867937.217  19727 10.0.0.1 TCP_MISS/200 7773 CONNECT rpc3.note.youdao.com:443 - DIRECT/123.58.182.210 -\r\n1487867939.884  24438 10.0.0.1 TCP_MISS/200 657 POST http://bbs.dcgamer.top/json/get_notifications - DIRECT/123.132.254.130 application/json\r\n```\r\n此时其实可以发现有了日志信息了，而且如果说把squid停掉的话我们用ie就上不去网了。上述的启动方式属于前台启动，-N参数表示不使用守护进程模式，因此我们再使用后台模式把squid启动起来。\r\n\r\n\r\n```\r\n[root@cache-server etc]# squid -D\r\n[root@cache-server etc]# ps -ef | grep squid\r\nroot      77799      1  0 00:47 ?        00:00:00 squid -D\r\nsquid     77801  77799  0 00:47 ?        00:00:00 (squid) -D\r\nsquid     77802  77801  0 00:47 ?        00:00:00 (dnsserver)\r\nsquid     77803  77801  0 00:47 ?        00:00:00 (dnsserver)\r\nsquid     77804  77801  0 00:47 ?        00:00:00 (dnsserver)\r\nsquid     77805  77801  0 00:47 ?        00:00:00 (dnsserver)\r\nsquid     77806  77801  0 00:47 ?        00:00:00 (dnsserver)\r\nsquid     77807  77801  0 00:47 ?        00:00:00 (unlinkd)\r\nroot      77810  77470  0 00:47 pts/0    00:00:00 grep --color squid\r\n```\r\n把squid加入到开机自启动：\r\n\r\n```\r\n[root@cache-server etc]# echo \"/application/squid/sbin/squid -D\">> /etc/rc.local\r\n```\r\n## 制作Squid的启动脚本\r\n很简单的一个脚本\r\n```\r\n[root@cache-server init.d]# cat /etc/init.d/squid\r\n#!/bin/sh\r\n# chkconfig: 345 88 14\r\n# description: To manage squid deamon\r\ncase \"$1\" in\r\nstart)\r\n     /application/squid/sbin/squid -D\r\n     ;;\r\nstop)\r\n     /application/squid/sbin/squid -k shutdown\r\n     ;;\r\nrestart)\r\n     /application/squid/sbin/squid -k reconfigure\r\n     ;;\r\nparse)\r\n     /application/squid/sbin/squid -k parse\r\n     ;;\r\ncheck)\r\n     /application/squid/sbin/squid -k check\r\n     ;;\r\n*)\r\n    echo \"Usage(start|stop|restart|parse|check)\"\r\n     ;;\r\nesac\r\n```\r\n## 日志轮询\r\n\r\n```\r\n[root@cache-server init.d]# ll /application/squid/var/logs/\r\ntotal 648\r\n-rw-r----- 1 squid squid 278098 Feb 24 01:02 access.log\r\n-rw-r----- 1 squid squid  18318 Feb 24 00:59 cache.log\r\n-rw-r--r-- 1 root  squid      6 Feb 24 00:58 squid.pid\r\n-rw-r----- 1 squid squid 350751 Feb 24 01:02 store.log\r\n[root@cache-server init.d]# squid -k rotate\r\n[root@cache-server init.d]# ll /application/squid/var/logs/\r\ntotal 660\r\n-rw-r----- 1 squid squid    140 Feb 24 01:02 access.log\r\n-rw-r----- 1 squid squid 278236 Feb 24 01:02 access.log.0\r\n-rw-r----- 1 squid squid    457 Feb 24 01:02 cache.log\r\n-rw-r----- 1 squid squid  18318 Feb 24 00:59 cache.log.0\r\n-rw-r--r-- 1 root  squid      6 Feb 24 00:58 squid.pid\r\n-rw-r----- 1 squid squid    178 Feb 24 01:02 store.log\r\n-rw-r----- 1 squid squid 350930 Feb 24 01:02 store.log.0\r\n```\r\n做了两件事：\r\n- 关闭当前打开的日志文件\r\n- 对日志文件进行重命名，如上面的命令显示后面加了个0做为扩展名，一次类推，下一次就是1,2,3……达到你在文件中设置的值。\r\n\r\n```\r\n#  TAG: logfile_rotate\r\n#       Specifies the number of logfile rotations to make when you\r\n#       type \'squid -k rotate\'. The default is 10, which will rotate\r\n#       with extensions 0 through 9. Setting logfile_rotate to 0 will\r\n#       disable the file name rotation, but the logfiles are still closed\r\n#       and re-opened. This will enable you to rename the logfiles\r\n#       yourself just before sending the rotate signal.\r\n#\r\n#       Note, the \'squid -k rotate\' command normally sends a USR1\r\n#       signal to the running squid process.  In certain situations\r\n#       (e.g. on Linux with Async I/O), USR1 is used for other\r\n#       purposes, so -k rotate uses another signal.  It is best to get\r\n#       in the habit of using \'squid -k rotate\' instead of \'kill -USR1\r\n#       <pid>\'.\r\n#\r\n#Default:\r\n# logfile_rotate 10\r\n\r\n```\r\n具体的值是在上面定义的，默认就是10个。\r\n","timestamp":1525331868024},{"name":"04-Squid ACL应用.md","path":"01-Linux运维/002-Linux运维基础/002-运维常用业务部署/08-Squid/04-Squid ACL应用.md","content":"# Squid ACL应用实战\r\n### 备份配置文件\r\n\r\n```\r\n[root@cache-server etc]# pwd\r\n/application/squid/etc\r\n[root@cache-server etc]# cp squid.conf{,.normal}\r\n[root@cache-server etc]# ll\r\ntotal 524\r\n-rw-r--r-- 1 root root    419 Feb 23 18:46 cachemgr.conf\r\n-rw-r--r-- 1 root root    419 Feb 23 18:46 cachemgr.conf.default\r\n-rw-r--r-- 1 root root  11651 Feb 23 18:46 mime.conf\r\n-rw-r--r-- 1 root root  11651 Feb 23 18:46 mime.conf.default\r\n-rw-r--r-- 1 root root 165175 Feb 24 00:30 squid.conf\r\n-rw-r--r-- 1 root root 165113 Feb 23 18:46 squid.conf.default\r\n-rw-r--r-- 1 root root 165175 Feb 24 01:13 squid.conf.normal\r\n[root@cache-server etc]# egrep -v \"^#|^$\" squid.conf.normal >squid.conf\r\n```\r\n在配置文件中加入如下的两行\r\n\r\n```\r\nacl sex url_regex -i ^http://.*oldboy.*\r\nhttp_access deny sex\r\n##这里指的注意的是最下面有一个http_access deny all，这一条命令要放在deny all的前面。\r\n```\r\n然后我们再去访问有关于oldboy关键字的网站的时候就会得到如下的结果：\r\n\r\n![](http://omk1n04i8.bkt.clouddn.com/17-3-28/60953621-file_1490695126385_4eba.jpg)\r\n\r\n如果我想要禁用域名中包含某些字符串的网址的访问（这里要使用urlpath_regex）：\r\n\r\n```\r\nacl sex urlpath_regex archive\r\nhttp_access deny sex\r\n```\r\n![](http://omk1n04i8.bkt.clouddn.com/17-3-28/57676733-file_1490695421051_178ac.jpg)\r\n\r\n使用acl控制上网下载的例子\r\n\r\n```\r\nacl BT urlpath_regex -i \\.torrents$\r\nacl BT urlpath_regex -i \\.torrents$ \\.mp3$\r\nhttp_access deny BT\r\n```\r\n控制访问某黄色网站\r\n\r\n```\r\nacl sex url_regex -i ^http://.*sex.*$\r\nhttp_access deny sex\r\n```\r\n单个IP每秒最多请求（并发）30个：可以用来防止爬虫，多线程下载：\r\n\r\n```\r\nacl OverConnLimit maxconn 30\r\nhttp_access deny OverConnLimit\r\n```\r\n\r\n使用acl不记录指定类型文件的日志\r\n```\r\nacl url_no_log urlpath_regex  \\.gif \\.jpg \\.css \\.js \\.swf \\.GIF \\.JPG \\.SWF F5BigIP\r\nacl method_no_log method PURGE HEAD\r\naccess_log /squid/logs/access.log combined !url_no_log !method_no_log\r\n```\r\n### 通过配置实现web管理squid\r\n开启apache\r\n```\r\n[root@cache-server ~]# /application/apache/bin/apachectl start\r\n```\r\n查找\r\n\r\n```\r\n[root@cache-server ~]# find /application/squid/ -name \"cachemgr.cgi\"\r\n/application/squid/libexec/cachemgr.cgi\r\n```\r\n然后将如下内容加入到我们的vhosts文件中，并将主配置文件的端口改为8080，供之后的代理的使用：\r\n\r\n```\r\nScriptAlias \"/squid\" \"/application/squid/libexec/cachemgr.cgi\"\r\n<Location \"/squid\">\r\n       Order   deny,allow\r\n       Deny    from all\r\n       Allow   from all\r\n</Location>\r\n\r\n主配置文件：\r\nListen 8080\r\n# 监听的端口，也可以指定监听哪个IP的指定端口\r\n[root@cache-server ~]# /application/apache/bin/apachectl graceful\r\n```\r\n访问测试：\r\n\r\n![](http://omk1n04i8.bkt.clouddn.com/17-3-28/63067339-file_1490696766701_540.jpg)\r\n默认的是没有用户名密码的，这个我们可以进行自定义的设置：\r\n\r\n```\r\ncachemgr_passwd oldboy config\r\n上面这条命令的格式为：\r\ncachemgr_passwd 密码 行为\r\n具体请参照default配置文件\r\n```\r\n\r\n![](http://omk1n04i8.bkt.clouddn.com/17-3-28/47540237-file_1490696769379_112c1.jpg)\r\n","timestamp":1525331868024},{"name":"05-Squid代理.md","path":"01-Linux运维/002-Linux运维基础/002-运维常用业务部署/08-Squid/05-Squid代理.md","content":"# Squid的代理\r\n## 代理模式\r\n### 透明代理\r\n>所谓的透明代理就是对于用户来说其实他和正常上网没什么区别，但是他走得是代理，对于用户来说，用户是根本感知不到代理的存在的，之前配置的代理我们又称为服务器代理。透明代理一般布置在网络的出口位置\r\n\r\n做透明代理具体需求如下：\r\n- 至少有两块网卡，一块连接出口的路由器，另外一块连接公司的内部网络\r\n- 所有的上网请求都通过代理服务器（即把代理服务器设置为网关）\r\n\r\n一般要做透明代理的的话，一般要在编译的时候把下面两条参数编译进去：\r\n\r\n```\r\n--enable-linux-netfilter\r\n--enable-linux-tproxy\r\n```\r\n\r\n配置透明代理很简单（帮助信息可以查看默认文件的http_port的TAG，直接搜索即可）：\r\n\r\n```\r\nhttp_port 3128 transparent\r\n并加入如下的三行\r\ncache_mem 80 MB               ##可以被使用的内存的总数，注意这个值要小于cache_dir中设置的值。\r\ncache_swap_low 90             ##squid使用率低于这个使用率不会进行删除目标      \r\ncache_swap_high 95            ##使用率超过95%，逐出对象的操作更加剧烈\r\nmaximum_object_size 8192 KB    ##最大的缓存对象的大小，默认是8K，如果大于这个值就不会放在磁盘里了。\r\nminimum_object_size 0 KB     \r\nmaximum_object_size_in_memory 4096 KB   ##这个是允许保存在内存里的对象的最大的大小。超过这个大小就不会保存在内存中了。\r\nemulate_httpd_log on\r\nmemory_replacement_policy lru  ##缓存算法 最少最近使用。\r\nrefresh_pattern \\.(jpg|png|gif|mp3|xml) 1440    50%     2880    ignore-reload\r\n```\r\n设置完透明代理后，进行防火墙的调整：\r\n\r\n```\r\n[root@cache-server ~]# iptables -t nat -A POSTROUTING -o eth0 -s 172.16.1.0/24 -j MASQUERADE\r\n开启设备的NAT功能，其中eth0为外网卡，eth1为内网卡，内网网段为172.16.1.0/24，对这个网段做nat转换\r\n\r\n[root@cache-server ~]# iptables -t nat -A PREROUTING -i eth1 -p tcp --dport 80 -j REDIRECT --to-ports 3128\r\n把从内网卡收到的请求做一个端口的重定向，针对80端口的访问重定向到squid的3128端口上。\r\n\r\n[root@cache-server ~]# vim /etc/sysctl.conf\r\nnet.ipv4.ip_forward = 1\r\n开启设备的IP转发\r\n\r\n[root@cache-server ~]# sysctl -p            \r\nnet.ipv4.ip_forward = 1\r\nnet.ipv4.conf.default.rp_filter = 1\r\nnet.ipv4.conf.default.accept_source_route = 0\r\nkernel.sysrq = 0\r\nkernel.core_uses_pid = 1\r\nnet.ipv4.tcp_syncookies = 1\r\nkernel.msgmnb = 65536\r\nkernel.msgmax = 65536\r\nkernel.shmmax = 68719476736\r\nkernel.shmall = 4294967296\r\n```\r\n测试：\r\n\r\n这里我新开了一台机器，网卡地址为172.16.1.100\r\n添加网关为172.16.1.7\r\n```\r\nroute add default gw 172.16.1.7\r\ncurl -I www.baidu.com\r\n回显为200，说明访问成功了！\r\n```\r\n我们再看squid服务器的日志信息\r\n\r\n```\r\n[root@cache-server etc]# tail -f ../var/logs/access.log\r\n1487880222.719     48 172.16.1.100 TCP_MISS/200 2873 GET http://www.baidu.com/ - DIRECT/61.135.169.125 text/html\r\n1487880228.207     41 172.16.1.100 TCP_MISS/200 424 HEAD http://www.baidu.com/ - DIRECT/61.135.169.121 text/html\r\n```\r\n这里的TCP/MISS其实就是代表了没有缓存的意思，透明代理实验成功。\r\n\r\n### 反向代理\r\n>公司购买CDN了，那么还要不要搭建squid\r\n\r\n基本需求就不是很大了。\r\n\r\n#### squid反向代理如何获得数据更新\r\n>squid反向代理一般只缓存可缓冲的数据（比如HTML网页，js，css和图片等），而一些CGI脚本程序或者ASP、JSP、PHP之类的动态程序默认不缓存。它根据从WEB服务器返回的HTTP头标记来缓冲静态页面。有四个重要的HTTP头标记\r\n- Last-Modified：告诉反向代理页面什么时间被修改\r\n- Expires：告诉反向代理页面什么时间应该从缓冲区中删除\r\n- Cache-Control：告诉反向代理页面是否应该被缓冲\r\n- Pragma：用来包含实现特定的命令，最常用的是Pragma：no-Cache\r\n\r\n优先级的对比（no-cache，expires，max-age）：\r\n\r\n经验：在squid中Caache-control：no-cache→Expires→refresh_pattern→Last-Modified（靠前面的最重要，前面的生效后，后面的基本就失效了）\r\n\r\n#### 常用header简单讲解：\r\n1. 不缓存控制\r\n    - Cache-Control：no-store：禁止中间的缓存服务器存储这个对象，并把header转发给用户。\r\n    - Cache-Control：no-cache：缓存服务器可以给文件缓存在本地缓存区，只是在和源站新鲜验证前，不能提供给客户端使用\r\n    - Pragma：：no-cache：这是兼容HTTP1.0的时候使用的，原则上是只能对于HTTP请求，用处和Cache-Control：no-cache一样。\r\n2. 指定过期时间控制\r\n    - Cache-Control：max-age表示如果缓存服务器拿到这个文件后，这个对象多久之内是新鲜的可以用的，可以发送给客户端使用的\r\n    - Cache-Control：s-maxage行为上和上面一样，只是只能适用于public的时候缓存\r\n    - Cache-Control：must-revalidate，默认的情况下，缓存代理时可以提供给客户一些旧的对象的内容，以提高性能，但是如果原始服务器不希望这样，就可以配置这个选项，进行严格的检查，比如源站不可用的时候，回源验证过程会失败，默认会吐旧的数据，但是配置了这个以后会吧报504 gateway timeout\r\n    - Expires：这个作用和max-age是一样的，但这是指定一个过期的日期，但不是秒数。所以不建议使用，因为很多缓存服务器和源服务器常常时间不同步，所以基于max-age是使用相对的时间来表示还剩下多少秒可以使用，不要使用expires来使用绝对时间。\r\n\r\n#### 反向代理测试\r\n>测试机器web01(10.0.0.8)\r\n\r\n配置文件进行备份加入如下的新内容：\r\n\r\n```\r\n#refresh_pattern [-i] regexp min percent max [options]\r\nrefresh_pattern -i \\.jpg$ 30 50% 4320 reload-into-ims\r\nrefresh_pattern -i \\.png$ 30 50% 4320 reload-into-ims\r\nrefresh_pattern -i \\.gif$ 30 50% 4320 reload-into-ims\r\nhttp_port 80 accel vhost vport\r\ncache_peer 10.0.0.8 parent 80 0 no-query no-digest max-conn=32 originserver\r\nhosts_file /etc/hosts\r\nrequest_header_max_size 128 KB\r\nipcache_size 1024\r\nipcache_low 90\r\nipcache_high 95\r\n#offline_mode on    ##不管你怎么刷还是ctrl+f5进行强刷不会有影响，普通的情况下如果源站挂了，客户端进行ctrl强刷，缓存是会失效的。\r\n```\r\n**注意：要把所有的系统时间同步再做缓存，否则会对缓存结果产生影响。**\r\n##### Tip\r\n- 这里的cache_peer后面可以跟源站的域名也可以跟源站的ip。我这里直接写的源站的ip，如果你要是写源站的域名的话，记得在本机的/etc/hosts中配置一下。\r\n\r\n配置成功以后对squid进行重启，然后访问squid反向代理服务器（设置ntp同步时间的定时任务），发现代理已经成功。返回的日志信息如下：\r\n\r\n```\r\n[root@cache-server etc]# tail  /application/squid/var/logs/access.log  \r\n1487894195.232      6 10.0.0.1 TCP_REFRESH_UNMODIFIED/200 77573 GET http://10.0.0.7/4.jpg - FIRST_UP_PARENT/10.0.0.8 image/jpeg\r\n1487894258.432      5 10.0.0.1 TCP_REFRESH_UNMODIFIED/304 386 GET http://10.0.0.7/4.jpg - FIRST_UP_PARENT/10.0.0.8 -\r\n1487894259.700      0 10.0.0.1 TCP_REFRESH_UNMODIFIED/304 386 GET http://10.0.0.7/4.jpg - FIRST_UP_PARENT/10.0.0.8 -\r\n1487894260.369      1 10.0.0.1 TCP_REFRESH_UNMODIFIED/304 386 GET http://10.0.0.7/4.jpg - FIRST_UP_PARENT/10.0.0.8 -\r\n1487894287.578      1 10.0.0.1 TCP_REFRESH_UNMODIFIED/304 386 GET http://10.0.0.7/4.jpg - FIRST_UP_PARENT/10.0.0.8 -\r\n1487894288.384      0 10.0.0.1 TCP_REFRESH_UNMODIFIED/304 386 GET http://10.0.0.7/4.jpg - FIRST_UP_PARENT/10.0.0.8 -\r\n1487894289.968      5 10.0.0.1 TCP_CLIENT_REFRESH_MISS/200 77453 GET http://10.0.0.7/4.jpg - FIRST_UP_PARENT/10.0.0.8 image/jpeg\r\n1487894290.011      1 10.0.0.1 TCP_MISS/404 798 GET http://10.0.0.7/favicon.ico - FIRST_UP_PARENT/10.0.0.8 text/html\r\n1487894291.651      5 10.0.0.1 TCP_CLIENT_REFRESH_MISS/200 77453 GET http://10.0.0.7/4.jpg - FIRST_UP_PARENT/10.0.0.8 image/jpeg\r\n1487894291.688      0 10.0.0.1 TCP_MISS/404 798 GET http://10.0.0.7/favicon.ico - FIRST_UP_PARENT/10.0.0.8 text/html\r\n```\r\n通过curl查看header头：\r\n\r\n```\r\n[root@cache-server etc]# curl -I -s 10.0.0.7/1.jpg| grep -i X-cache\r\nX-Cache: HIT from img01.etiantian.org\r\n[root@cache-server etc]# curl -I -s 10.0.0.7/2.jpg| grep -i X-cache\r\nX-Cache: HIT from img01.etiantian.org\r\n[root@cache-server etc]# curl -I -s 10.0.0.7/3.jpg| grep -i X-cache\r\nX-Cache: HIT from img01.etiantian.org\r\n[root@cache-server etc]# curl -I -s 10.0.0.7/4.jpg| grep -i X-cache\r\nX-Cache: HIT from img01.etiantian.org\r\n[root@cache-server etc]# curl -I -s 10.0.0.7/5.jpg| grep -i X-cache\r\nX-Cache: MISS from img01.etiantian.org\r\n```\r\n#### 日志分析\r\n首先看一下配置文件中默认的日志格式：\r\n\r\n```\r\n#  TAG: logformat\r\n#       Usage:\r\n#\r\n#       logformat <name> <format specification>\r\n#\r\n#       Defines an access log format.\r\n#\r\n#       The <format specification> is a string with embedded % format codes\r\n#\r\n#       % format codes all follow the same basic structure where all but\r\n#       the formatcode is optional. Output strings are automatically escaped\r\n#       as required according to their context and the output format\r\n#       modifiers are usually not needed, but can be specified if an explicit\r\n#       output format is desired.\r\n#\r\n#               % [\"|[|\'|#] [-] [[0]width] [{argument}] formatcode\r\n#\r\n#               \"       output in quoted string format\r\n#               [       output in squid text log format as used by log_mime_hdrs\r\n#               #       output in URL quoted format\r\n#               \'       output as-is\r\n#\r\n#               -       left aligned\r\n#               width   field width. If starting with 0 the\r\n#                       output is zero padded\r\n#               {arg}   argument such as header name etc\r\n#\r\n#       Format codes:\r\n#\r\n#               >a      Client source IP address\r\n#               >A      Client FQDN\r\n#               >p      Client source port\r\n#               <A      Server IP address or peer name\r\n#               la      Local IP address (http_port)\r\n#               lp      Local port number (http_port)\r\n#               ts      Seconds since epoch\r\n#               tu      subsecond time (milliseconds)\r\n#               tl      Local time. Optional strftime format argument\r\n#                       default %d/%b/%Y:%H:%M:%S %z\r\n#               tg      GMT time. Optional strftime format argument\r\n#                       default %d/%b/%Y:%H:%M:%S %z\r\n#               tr      Response time (milliseconds)\r\n#               >h      Request header. Optional header name argument\r\n#                       on the format header[:[separator]element]\r\n#               <h      Reply header. Optional header name argument\r\n#                       as for >h\r\n#               un      User name\r\n#               ul      User name from authentication\r\n#               ui      User name from ident\r\n#               us      User name from SSL\r\n#               Ss      Squid request status (TCP_MISS etc)\r\n#               Sh      Squid hierarchy status (DEFAULT_PARENT etc)\r\n#               mt      MIME content type\r\n#               rm      Request method (GET/POST etc)\r\n#               ru      Request URL\r\n#               rp      Request URL-Path excluding hostname\r\n#               rv      Request protocol version\r\n#               et      Tag returned by external acl\r\n#               ea      Log string returned by external acl\r\n#               <st     Reply size including HTTP headers\r\n#               >st     Request size including HTTP headers\r\n#               st      Request+Reply size including HTTP headers\r\n#               <sH     Reply high offset sent\r\n#               <sS     Upstream object size\r\n#               %       a literal % character\r\n#\r\n#       The default formats available (which do not need re-defining) are:\r\n#\r\n#logformat squid %ts.%03tu %6tr %>a %Ss/%03Hs %<st %rm %ru %un %Sh/%<A %mt\r\n#logformat squidmime %ts.%03tu %6tr %>a %Ss/%03Hs %<st %rm %ru %un %Sh/%<A %mt [%>h] [%<h]\r\n#logformat common %>a %ui %un [%tl] \"%rm %ru HTTP/%rv\" %Hs %<st %Ss:%Sh\r\n#logformat combined %>a %ui %un [%tl] \"%rm %ru HTTP/%rv\" %Hs %<st \"%{Referer}>h\" \"%{User-Agent}>h\" %S\r\ns:%Sh\r\n#\r\n#Default:\r\n# none\r\n```\r\n设置日志格式：\r\n\r\n```\r\naccess_log /application/squid3.0/var/logs/access.log combined\r\nlogformat combined %{X-Forwarded-For}>h %ui %un [%tl] \"%rm %ru HTTPP/%rv\" %Hs %<st \"%{Referer}>h\" \"%{\r\nUser-Agent}>h\" %Ss:%Sh\r\n```\r\n然后访问后查看日志：\r\n\r\n```\r\n[root@cache-server etc]# tail -f /application/squid/var/logs/access.log\r\n1487902472.069      2 10.0.0.1 TCP_REFRESH_UNMODIFIED/304 386 GET http://10.0.0.7/4.jpg - FIRST_UP_PARENT/10.0.0.8 -\r\n1487902474.810      2 10.0.0.1 TCP_REFRESH_UNMODIFIED/304 386 GET http://10.0.0.7/4.jpg - FIRST_UP_PARENT/10.0.0.8 -\r\n1487902475.652      1 10.0.0.1 TCP_REFRESH_UNMODIFIED/304 386 GET http://10.0.0.7/4.jpg - FIRST_UP_PARENT/10.0.0.8 -\r\n1487902480.350      1 10.0.0.1 TCP_REFRESH_UNMODIFIED/304 385 GET http://10.0.0.7/3.jpg - FIRST_UP_PARENT/10.0.0.8 -\r\n1487902493.632      1 10.0.0.1 TCP_REFRESH_UNMODIFIED/304 385 GET http://10.0.0.7/2.jpg - FIRST_UP_PARENT/10.0.0.8 -\r\n1487902498.371      2 10.0.0.1 TCP_REFRESH_UNMODIFIED/304 385 GET http://10.0.0.7/1.jpg - FIRST_UP_PARENT/10.0.0.8 -\r\n1487902500.072      1 10.0.0.1 TCP_REFRESH_UNMODIFIED/304 385 GET http://10.0.0.7/1.jpg - FIRST_UP_PARENT/10.0.0.8 -\r\n```\r\n\r\n\r\n日志缓存编码：\r\n\r\naccess.log日志缓存编码| 说明\r\n---|---\r\nTCP_HIT | Squid发现请求的资源貌似新鲜的拷贝，并将其立即发送到客户端\r\nTCP_MISS | Squid没有请求资源的cache拷贝\r\nTCP_REFRESH_HIT | squid发现请求的资源貌似陈旧的拷贝，并发送确认请求到源站，源站返回304（未修改）响应，提示squid的拷贝仍然是新鲜的\r\nTCP_REF_FAIL_HIT | squid发现请求的资源貌似陈旧的拷贝，并发送确认请求到源站，然而源站服务器响应失败，或者返回的响应squid不能理解，在此情况下，squid发送现有的cache拷贝（很可能是陈旧的）到客户端\r\nTCP_REFRESH_MISS | Squid发现请求资源貌似陈旧的拷贝，并发送确认请求到源站，源站响应了新的内容弄，只是这个cache拷贝确实是过期了\r\nTCP_CLIENT_REFERSH_MISS | Squid发现了请求资源的拷贝，但是客户端的请求包含了cache-control：no-cache命令，squid转发客户端的请求到原始服务器强迫cache确认，就比如我们在浏览器使用ctrl+F5\r\nTCP_IMS_HIT | 客户端发送确认请求，squid发现更近来的，貌似新鲜的请求资源的拷贝，squid发送更新的内容到客户端，而不联系源站，F5\r\nTCP_SWAPFAIL_MISS | squid发现请求资源的有效拷贝，但从磁盘装载它失败，这时squid发送请求到原始服务器，就如同这是个cache丢失一样\r\nTCP_NEGATIVE_HIT | 在对原始服务器的请求导致HTTP错误的时候，Squid也会cache这个响应，在短时间内对这些资源的重复请求，导致了否命中，negative_ttl指令控制这些错误被cache的时间数量，值得注意的是，这些错误只在内存中cache，不会被写入磁盘，下列状态码可能导致否定的cache：204,305,400,403,404,405,414,500,501,502，503,504\r\nTCP_MEM_HIT | Squid在内存cache里发现请求资源的有效拷贝，并将其立即发往客户端。注意这点并非精确的呈现了所有从内存服务的响应。例如，某些cache在内存里，但要求确认的响应，会以TCP_REFRESH_HIT等形式记录。\r\nTCP_DENIED | 因为http_access或者http_reply_access规则，客户端的情被拒绝了。注意被http_access拒绝的请求在第9域的值是NONE，然而被http_reply_access拒绝的请求，在相应的地方有一个有效值。\r\nTCP_OFFLINE_HIT | 当offline_mode激活的是时候，squid对任何cache响应返回cache命中，而不用考虑它的新鲜程度\r\nTCP_REDIRECT | 重定向程序告诉squid产生一个http重定向到新的URI。正常的，squid不会记录这些重定向，假如要这样做，必须在编译squid前，手工定义LOG_TCP_REDIRECTS预处理命令\r\n","timestamp":1525331868024},{"name":"01-01、进程管理.md","path":"01-Linux运维/002-Linux运维基础/003-日常运维总结/01-01、进程管理.md","content":"# 进程管理\n\n> 在日常运维的过程中，难免会遇到进程需要管理和查看的地方。\n\n常见的查看方法","timestamp":1525331868024},{"name":"02-02、nmon.md","path":"01-Linux运维/002-Linux运维基础/003-日常运维总结/02-02、nmon.md","content":"# NMON\n\n> nmon是一种在AIX与各种Linux操作系统上广泛使用的监控与分析工具， nmon所记录的信息是比较全面的，它能在系统运行过程中实时地捕捉系统资源的使用情况，并且能输出结果到文件中。\n\n- 官方网站：http://nmon.sourceforge.net/pmwiki.php\n- 分析工具：[nmon analyser](https://www.ibm.com/developerworks/community/wikis/home?lang=en#!/wiki/Power+Systems/page/nmon_analyser)\n\n## 下载安装\n\nnmon可以直接去官方网站下载nmon的二进制文件，或者使用yum安装，Ubuntu可以使用apt-get\n\n- Ubuntu：`sudo apt-get install -y nmon`\n- CentOS：`sudo yum install -y nmon`，前提是你已经有安装 epel 源\n  - 或者使用 RPM 包：http://tools.dcgamer.top/nmon/nmon-14i-8.el6.x86_64.rpm\n    - 安装命令：`rpm -ivh nmon-14i-8.el6.x86_64.rpm`\n- 分析工具 nmon analyser：http://tools.dcgamer.top/nmon/nmon_analyser_v5_0_2.zip\n\n\n\n\n\n\n\nnmom定义问题：http://www.51testing.com/html/25/15146625-3714909.html\n\n","timestamp":1525331868024},{"name":"01-01-服务器禁ping.md","path":"01-Linux运维/005-Linux服务器小应用/01-01-服务器禁ping.md","content":"# 服务器禁ping\n\n> 服务器禁ping有两种方式，一个是通过修改内核参数实现，另外一个则是通过iptables进行拦截\n\n## 修改内核参数\n\n```\nsysctl -w net.ipv4.icmp_echo_ignore_all=1 \n```\n\n/proc/sys/net/ipv4/icmp_echo_ignore_all   内容为 1 禁止ping  内容为0 开启ping。\n\n## 添加iptables策略\n\n```shell\niptables -A INPUT -p icmp --icmp-type 8 -s 0/0 -j DROP  \n```\n\nping 命令工作的是 发送一个ICMP请求报文交给目的IP，然后目的IP回复一个ICMP报文。上述命令就是利用iptables丢弃掉请求的ICMP包，达到禁ping效果。\n\n\n\n上述的方法都是临时修改，如果需要永久修改的话还是加到配置文件里去比较靠谱。\n\n```\n在/etc/sysctl.conf文件中添加\nnet.ipv4.icmp_echo_ignore_all = 1\n\n然后执行 sysctl -p\n```\n\n","timestamp":1525331868024},{"name":"1-简单实用.md","path":"01-Linux运维/007-Python for Linux/1-简单实用.md","content":"# Python for Linux简单实用\n\n[TOC]\n\n## 一、内置小工具的简单使用\n\n### 1、使用python内置工具开启一个httpserver\n\n- 进入对应的要共享的目录\n\n  ```shell\n  cd target_dir\n  ```\n\n- 执行内置命令\n\n  ```shell\n  python -m SimpleHTTPServer or python -m http.server\n  ```\n\n### 2、字符串转化为json格式的字符串\n\n```python\n echo \'{\"job\":\"developer\",\"name\":\"lmx\",\"sex\":\"male\"}\' | python -m json.tool\n```\n\n### 3、检测模块是否安装\n\n```python\npython -c \"import paramiko\"\n```\n\n## 二、Pip\n\n> pip是一个用来安装和管理python包的工具，是easy_install的替代品，Python2.7和3.4以上内置了pip如果不是这两个版本也可以使用石洞进行安装。可以直接使用yum，Ubuntu可以使用apt-get。\n\n```shell\nyum -y install python-pip\n\n# 升级pip\npip install -U pip\n```\n\n### Pip简单实用\n\nPip的优点：\n\n- 提供了丰富的功能，支持以列表显示，安装，卸载等。\n- 很好的支持python的虚拟环境\n- pip可以处理二进制格式，比如.whl\n- pip是先下载后安装，如果安装失败会处理干净，不会留下中间状态。\n\npip的用法：\n\n```shell\n- install：安装软件包\n- download：下载软件包\n- uninstall：卸载软件包\n- freeze：按照requirements格式输出安装包，可以到其他服务器上执行pip install -r requirements.txt 直接安装软件，pip freeze > requirements.txt\n- list：列出当前系统中的安装包\n- show：查看安装包信息\n- check：pip 9.0.1 提供的最新子命令，检查安装包的依赖是否完整\n- search：查找安装包\n- wheel：打包软件到whell格式\n- hash：计算安装包的hash值\n- completion：生成命令不全配置\n- help：获取pip的帮助信息。\n```\n\n### 加速pip的访问\n\n可以通过加-i参数指定一个较快的镜像源进行安装\n\n```shell\npip install -i https://pypi.douban.com/simple pkg_name\n```\n\n修改配置文件指定默认的高速镜像源\n\n```shell\n$ cat pip.conf\n[global]\nindex-url = https://pypi.douban.com/simple/\n```\n\n### 下载到本地安装\n\n```shell\npip install --download=\'路径\' -r requirements.txt\npip install --no-index -f file://\'路径\' -r requirements.txt\n```\n\n## 配置VIM编写python\n\n\n\n```shell\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\"    Quickly Run   \"\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nmap <F5>:call CompileRunGcc()<CR>\nfunc! CompileRunGcc()\n    exec \"w\"\n    if &filetype == \'c\'\n        exec \"!g++ % -o %<\"\n        exec \"!time ./%<\"\n```\n\n","timestamp":1525331868024},{"name":"2-使用python编写脚本.md","path":"01-Linux运维/007-Python for Linux/2-使用python编写脚本.md","content":"# Python编写脚本\n\n> shell中我们可以根据自己的需要去编写脚本，shell中提供了很多常用的方法，比如`$1`,`$?`等等，\n\n","timestamp":1525331868024}]